buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.8.RELEASE")
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.9"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.10"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'net.ltgt.apt'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
allprojects {
    apply plugin: 'java'
}

repositories {
    mavenCentral()
}

group 'com.bordozer'
version '1.00'
archivesBaseName = 'search-engine'

sourceCompatibility = 1.8

ext {
    spotbugsVersion = '3.1.8'
    junit5Version = '5.3.1'
    mockitoVersion = '2.23.0'
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    compile group: 'com.github.spotbugs', name: 'spotbugs', version: spotbugsVersion
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsVersion
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    compileOnly  group: 'net.jcip', name: 'jcip-annotations', version: '1.0'

    compile group: 'org.immutables', name: 'value', version: '2.5.6'

    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.5.0'

    compile group: 'com.google.guava', name: 'guava', version: '27.0.1-jre'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'ch.qos.logback:logback-core:1.2.3'

    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    compileOnly  group: 'net.jcip', name: 'jcip-annotations', version: '1.0'

    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.10'

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit5Version
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
    testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: junit5Version
    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.3.1'
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockitoVersion
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.11.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}
test.testLogging.showStandardStreams = true

/* <CHECKSTYLE> */
apply plugin: 'checkstyle'

checkstyle {
    ignoreFailures = false
    configFile = file("${buildDir}/resources/main/sca/checkstyle/checkstyle.xml")
    configProperties = ["suppressionFile": file("${buildDir}/resources/main/sca/checkstyle/checkstyle-exclude.xml")]
    maxWarnings = 0
    showViolations = true
    toolVersion ="8.16"
}

tasks.withType(Checkstyle) { task ->
    reports {
        html.enabled = true
        xml.enabled = false
    }
    enabled = false
}
/* </CHECKSTYLE> */

/* <PMD> */
apply plugin: "pmd"

pmd {
    ignoreFailures = false
    pmdTest.enabled = false
    ruleSetFiles = files("${buildDir}/resources/main/sca/pmd/pmd-ruleset.xml")
    ruleSets = []
    consoleOutput = true
    toolVersion ="6.10.0"
}

tasks.withType(Pmd) { task ->
    reports {
        html.enabled = true
        xml.enabled = false
    }
    enabled = false
}
/* </PMD> */

/* <SPOTBUGS> */
apply plugin: com.github.spotbugs.SpotBugsPlugin

spotbugs  {
    toolVersion = '3.1.8'
    ignoreFailures = false
    spotbugsTest.enabled = false
    effort 'max'
    reportLevel = "low"
    excludeFilter = file("${buildDir}/resources/main/sca/spotbugs/excludeFilter.xml")
}

tasks.withType(com.github.spotbugs.SpotBugsTask) { task ->
    reports {
        xml.enabled = false
        html.enabled = true
    }
    enabled = false
}
/* </SPOTBUGS> */

ext {
    scaSource = 'src/main/java/com/bordozer/resourcepool'
}
checkstyleMain {
    source = scaSource
}
pmdMain {
    source = scaSource
}
tasks.withType(Checkstyle) { task -> enabled = true }
tasks.withType(Pmd) { task -> enabled = true }
spotbugsMain.enabled = true

sourceSets {
    main {
        java.srcDir "${buildDir}/generated/source/apt/main"
    }
    /*generated{
        java.srcDir "${buildDir}/generated/source/apt/main"
    }

    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }

    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }*/
}

compileJava.dependsOn clean
//compileJava.dependsOn(compileGeneratedJava)
//compileJava.source sourceSets.generated.java, sourceSets.main.java

